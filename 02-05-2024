class Solution
{
public:
    vector<int> serialize(Node *root) 
    {
        vector<int> level;
        queue<Node *> q;
        
        q.push(root);
        while(!q.empty())
        {
            int n = q.size();
            while(n--)
            {
                auto p = q.front();
                q.pop();
            
                if(!p)
                {
                    level.push_back(-1);
                    continue;
                }
                
                level.push_back(p->data);
                q.push(p->left);
                q.push(p->right);
            }
        }
        
        return level;
    }
    
    Node * deSerialize(vector<int> &a)
    {
        Node *root = new Node(a[0]);
        queue<Node *> q;
        
        q.push(root);
        int i = 1;
        
        while(!q.empty() and i < a.size()) 
        {
            auto p = q.front();
            q.pop();
            
            if(a[i] == -1)
                p->left = NULL;
            else 
            {
                p->left = new Node(a[i]);
                q.push(p->left);
            }
            
            i++;
        
            if(a[i] == -1)
                p->right = NULL;
            else 
            {
                p->right = new Node(a[i]);
                q.push(p->right);
            }
            
            i++;
        }
        
        return root;
    }
};